apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "hermes-relayer.fullname" . }}-scripts
data:
  start.sh: |
    #!/bin/bash

    export PATH="/root/.cargo/bin:${PATH}"
    export GOBIN=/go/bin
    export GOPATH=/go
    export CGO_ENABLED=0
    export GOOS=linux

    echo "relayer mapping: $relayer_mapping"
    echo "config location: $hermes_config_location"
    echo "Configuring the chains in config.toml config for hermes"
    echo "make directory"
    mkdir -p /root/.hermes/
    echo "touch config file"
    touch $hermes_config_location
    echo "check file was touched in hermes directory"
    echo "" >> /root/.hermes/chain_names

    check_config_exist=`cat ${hermes_config_location} | grep "telemetry"`
    echo "Checking without put form test: ${check_config_exist}"
    if [ -z "${check_config_exist}" ]; then
      echo "Config not found configuring"
      echo "initate file global config"
      echo "[global]" > ${hermes_config_location}
      echo "strategy = 'packets'" >> ${hermes_config_location}
      echo "log_level = 'trace'" >> ${hermes_config_location}

      echo "[telemetry]" >> ${hermes_config_location}
      echo "enabled = true" >> ${hermes_config_location}
      echo "host = '127.0.0.1'" >> ${hermes_config_location}
      echo "port = 3001" >> ${hermes_config_location}
    fi

    echo "loop relayer mapping"
    echo "${relayer_mapping}" | jq -c '.[]' | while read i; do
      echo ">========= Configure chain ========================================================>"
      id=$(echo "${i}" | jq .id)
      header=$(echo "${i}" | jq .header)
      rpc_addr=$(echo "${i}" | jq .rpc_addr)
      grpc_addr=$(echo "${i}" | jq .grpc_addr)
      websocket_addr=$(echo "${i}" | jq .websocket_addr)
      rpc_timeout=$(echo "${i}" | jq .rpc_timeout)
      account_prefix=$(echo "${i}" | jq .account_prefix)
      key_name=$(echo "${i}" | jq .key_name)
      store_prefix=$(echo "${i}" | jq .store_prefix)
      max_gas=$(echo "${i}" | jq .max_gas)
      gas_price=$(echo "${i}" | jq .gas_price)
      gas_adjustment=$(echo "${i}" | jq .gas_adjustment)
      clock_drift=$(echo "${i}" | jq .clock_drift)
      trusting_period=$(echo "${i}" | jq .trusting_period)
      trust_threshold=$(echo "${i}" | jq .trust_threshold)
      max_tx_size=$(echo "${i}" | jq .max_tx_size)

      check_hd_path_exist=$(echo "${i}" | grep "hd_path")
      if [ -z "${check_hd_path_exist}" ]; then
        echo "=========="
        echo "No HD Path found continuing."
        echo ""
      else
        echo "=========="
        echo "Setting HD Path variable."
        hd_path=$(echo "${i}" | jq .hd_path)
        echo "HDPATH ${hd_path:1:-1}"
      fi

      echo ""
      echo -n "${id:2:-2} " >> /root/.hermes/chain_names
      echo "Check if chain already configured in hermes relayer: ChainID: ${id:1:-1}"
      check_config_exist=`cat ${hermes_config_location} | grep "${id:1:-1}"`
      echo "Checking without put form test: ${check_config_exist}"

      if [ -z "${check_config_exist}" ]; then
        echo "Config not found configuring"
        echo "" >> ${hermes_config_location}
        echo "Configuring the chains in config.toml config for hermes"
        echo "${header:1:-1}" >> ${hermes_config_location}

        echo "id=${id:1:-1}" >> ${hermes_config_location}
        echo "rpc_addr=${rpc_addr:1:-1}" >> ${hermes_config_location}
        echo "grpc_addr=${grpc_addr:1:-1}" >> ${hermes_config_location}
        echo "websocket_addr=${websocket_addr:1:-1}" >> ${hermes_config_location}
        echo "rpc_timeout=${rpc_timeout:1:-1}" >> ${hermes_config_location}
        echo "account_prefix=${account_prefix:1:-1}" >> ${hermes_config_location}
        echo "key_name=${key_name:1:-1}" >> ${hermes_config_location}
        echo "store_prefix=${store_prefix:1:-1}" >> ${hermes_config_location}
        echo "max_gas=${max_gas:1:-1}" >> ${hermes_config_location}
        echo "gas_price=${gas_price:1:-1}" >> ${hermes_config_location}
        echo "gas_adjustment=${gas_adjustment:1:-1}" >> ${hermes_config_location}
        echo "clock_drift=${clock_drift:1:-1}" >> ${hermes_config_location}
        echo "trusting_period=${trusting_period:1:-1}" >> ${hermes_config_location}
        echo "trust_threshold=${trust_threshold:1:-1}" >> ${hermes_config_location}
        echo "max_tx_size=${max_tx_size:1:-1}" >> ${hermes_config_location}

        echo ""
        test_denom=`echo ${gas_price:1:-1} | cut -d '=' -f 3 | cut -d "'" -f 2 | sed -e 's/ //g'`
        test_gas_fee=`echo ${gas_price:1:-1} | cut -d '=' -f 2 | cut -d ',' -f 1 | sed -e 's/ //g'`
        echo "stripped denom $test_denom"
        echo "stripped fee $test_gas_fee"
        echo ""

        #        echo "id=${id:1:-1}" >> ${hermes_config_location}
        #        echo "rpc_addr=${rpc_addr:1:-1}" >> ${hermes_config_location}
        #        echo "grpc_addr=${grpc_addr:1:-1}" >> ${hermes_config_location}
        #        echo "websocket_addr=${websocket_addr:1:-1}" >> ${hermes_config_location}
        #        echo "account_prefix=${account_prefix:1:-1}" >> ${hermes_config_location}
        #        echo "key_name=${key_name:1:-1}" >> ${hermes_config_location}
        #        echo "store_prefix=${store_prefix:1:-1}" >> ${hermes_config_location}
        #        echo "fee_denom=$test_denom" >> ${hermes_config_location}
        #        echo "fee_amount=$test_gas_fee" >> ${hermes_config_location}
        #        echo "gas=${max_gas:1:-1}" >> ${hermes_config_location}
        #        echo "clock_drift=${clock_drift:1:-1}" >> ${hermes_config_location}
        #        echo "trusting_period=${trusting_period:1:-1}" >> ${hermes_config_location}
        #
        #        echo "[chains.trust_threshold]" >> ${hermes_config_location}
        #        echo "numerator='1'" >> ${hermes_config_location}
        #        echo "denominator='3'" >> ${hermes_config_location}

      else
        echo "Config for chain: ${id:1:-1} was found"
      fi

      echo " "
      echo "Look to see if there are any keys to configure and configure keys"
      echo "==========="
      echo "account_prefix=${account_prefix:1:-1}"
      echo "key_name=${key_name:2:-2}"

      if [ "${account_prefix:1:-1}" = "'cosmos'" ]; then
        echo "Import COSMOS Mnemonic with Keyname ${key_name:2:-2}"
        hermes keys restore -m "${gaia_mnemonic}" ${id:2:-2} --name ${key_name:2:-2}
      fi

      if [ "${account_prefix:1:-1}" = "'sif'" ]; then
        echo "Import Sifnode Mnemonic with Keyname ${key_name:2:-2}"
        hermes keys restore -m "${sifnode_mnemonic}" ${id:2:-2} --name ${key_name:2:-2}
      fi

      if [ "${account_prefix:1:-1}" = "'akash'" ]; then
        echo "Import AKASH Mnemonic with Keyname ${key_name:2:-2}"
        hermes keys restore -m "${akash_mnemonic}" ${id:2:-2} --name ${key_name:2:-2}
      fi

      if [ "${account_prefix:1:-1}" = "'iaa'" ]; then
        echo "Import IRIS Mnemonic with Keyname ${key_name:2:-2}"
        hermes keys restore -m "${iris_mnemonic}" ${id:2:-2} --name ${key_name:2:-2}
      fi

      if [ "${account_prefix:1:-1}" = "'sent'" ]; then
        echo "Import SENTINEL Mnemonic with Keyname ${key_name:2:-2}"
        hermes keys restore -m "${sentinel_mnemonic}" ${id:2:-2} --name ${key_name:2:-2}
      fi

      if [ "${account_prefix:1:-1}" = "'persistence'" ]; then
        echo "Import Persistence Mnemonic with Keyname ${key_name:2:-2}"
        hermes keys restore -m "${persistence_mnemonic}" ${id:2:-2} --name ${key_name:2:-2} -p "${hd_path:1:-1}"
      fi

      if [ "${account_prefix:1:-1}" = "'osmo'" ]; then
        echo "Import OSMOSIS Mnemonic with Keyname ${key_name:2:-2}"
        hermes keys restore -m "${osmosis_mnemonic}" ${id:2:-2} --name ${key_name:2:-2}
      fi

      if [ "${account_prefix:1:-1}" = "'regen'" ]; then
        echo "Import REGEN Mnemonic with Keyname ${key_name:2:-2}"
        hermes keys restore -m "${regen_mnemonic}" ${id:2:-2} --name ${key_name:2:-2}
      fi

      if [ "${account_prefix:1:-1}" = "'cro'" ]; then
        echo "Import CRYPTO-ORG Mnemonic with Keyname ${key_name:2:-2}"
        hermes keys restore -m "${crypto_mnemonic}" ${id:2:-2} --name ${key_name:2:-2} -p "${hd_path:1:-1}"
      fi

      echo "<========= Configure chain ========================================================<"
      echo ""

    done

    echo ""
    echo "Look at config ensure it lookgs good."
    cat $hermes_config_location

    echo "${connection_mapping}" | jq -c '.[]' | while read i; do
      echo ">========= Configure channel connections for chains ========================================================>"
      mapping=$(echo "${i}" | jq .mapping)
      echo "connection mapping: ${mapping:1:-1}"
      source_chain=`echo -n ${mapping:1:-1} | cut -d ' ' -f 1`
      destination_chain=`echo -n ${mapping:1:-1} | cut -d ' ' -f 2`
      echo "testing clinet connection for source chain: ${source_chain} and destination chain: ${destination_chain}"
      test_connection_open=`hermes query clients ${source_chain} | grep "${destination_chain}"`
      if [ -z "${test_connection_open}" ]; then
        echo "Client not established for destination chain, establishing client: test output: ${test_connection_open}"
        hermes create channel ${mapping:1:-1} --port-a transfer --port-b transfer -o unordered
      else
        echo "Client Connection Already Established Testoutput: ${test_connection_open}"
      fi
      echo "<====================================="
    done

    hermes start


