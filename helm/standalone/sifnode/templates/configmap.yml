apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "sifnode.fullname" . }}-scripts
data:
  backup.sh: |
    #!/bin/sh
    #
    # ./backup.sh
    #

    if [ ! -d ${HOME}/.sifnoded/backups ]; then
      mkdir -p ${HOME}/.sifnoded/backups
    fi

    if [ ! -d ${HOME}/.sifnoded/exports ]; then
      mkdir -p ${HOME}/.sifnoded/exports
    fi

    SUFFIX=`date +%s`

    ${HOME}/.sifnoded/cosmovisor/current/bin/sifnoded export > ${HOME}/.sifnoded/exports/genesis-${SUFFIX}.json

    cd ${HOME}/.sifnoded/data
    tar -zcvf ${HOME}/.sifnoded/backups/snapshot-${SUFFIX}.tgz application.db blockstore.db cs.wal evidence.db state.db tx_index.db

    aws s3 cp ${HOME}/.sifnoded/backups/snapshot-${SUFFIX}.tgz s3://${BUCKET}/ --acl public-read
    aws s3 cp ${HOME}/.sifnoded/exports/genesis-${SUFFIX}.json s3://${BUCKET}/ --acl public-read
    rm -f ${HOME}/.sifnoded/backups/snapshot-$SUFFIX.tgz

  external-ip.sh: |
    #!/bin/bash
    #
    # ./external-ip.sh <service> <namespace> <config_map>
    #

    apk add bind-tools

    SERVICE=$1
    NAMESPACE=$2
    CONFIGMAP=$3

    external_ip=""

    kubectl annotate svc $SERVICE service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled=false --overwrite
    sleep 5
    kubectl annotate svc $SERVICE service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled=true --overwrite

    while [ -z $external_ip ]; do
      echo "Waiting for load balancer external endpoint..."
      external_ip=$(kubectl get svc $SERVICE -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
      if [ -z $external_ip ]; then
        hostname=$(kubectl get svc $SERVICE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        [ ! -z $hostname ] && external_ip=$(dig +short $hostname | sort | head -1)
      fi
      [ -z $external_ip ] && sleep 10
    done

    kubectl create configmap $CONFIGMAP --from-literal=externalIP=$external_ip --dry-run=client -o yaml | kubectl apply -f -

  import.sh: |
    #!/bin/sh
    #
    # ./import.sh <import_url>
    #

    IMPORT_URL=$1

    if [ ! -d $HOME/.sifnoded/imports ]; then
      mkdir $HOME/.sifnoded/imports
    fi

    cd $HOME/.sifnoded/imports
    wget -O latest.json.gz ${IMPORT_URL}
    gunzip latest.json.gz

    # Fixes to bring across the pool and oracle data.
    jq '.app_state.clp.pool_list = [] | .app_state.clp.liquidity_provider_list = [] | .app_state.oracle.prophecies = []' $HOME/.sifnoded/config/genesis.json > genesis.json
    mv genesis.json $HOME/.sifnoded/config/genesis.json

    jq -s 'def deepmerge(a;b):
     reduce b[] as $item (a;
       reduce ($item | keys_unsorted[]) as $key (.;
         $item[$key] as $val | ($val | type) as $type | .[$key] = if ($type == "object") then
           deepmerge({}; [if .[$key] == null then {} else .[$key] end, $val])
         elif ($type == "array") then
           (.[$key] + $val | unique)
         else
           $val
         end)
       );
     deepmerge({}; .)' latest.json $HOME/.sifnoded/config/genesis.json > genesis.json

    mv genesis.json $HOME/.sifnoded/config/genesis.json

  upgrade.sh: |
    #!/bin/sh
    #
    # ./upgrade.sh
    #

    case $CHAINNET in
      *"devnet"*)
        PREFIX="devnet"
        ;;
      *"testnet"*)
        PREFIX="testnet"
        ;;
      *)
        PREFIX="mainnet"
        ;;
    esac

    # Download the upgrade.
    mkdir -p ${HOME}/.sifnoded/cosmovisor/upgrades/${VERSION}/bin
    cd ${HOME}/.sifnoded/cosmovisor/upgrades/${VERSION}/bin
    wget -O sifnoded.zip https://github.com/Sifchain/sifnode/releases/download/${PREFIX}-${VERSION}/sifnoded-${PREFIX}-${VERSION}-linux-amd64.zip
    unzip sifnoded.zip

    # Check current version.
    if [ ! -d ${HOME}/.sifnoded/cosmovisor/upgrades/${CURRENT_VERSION} ]; then
      mkdir -p ${HOME}/.sifnoded/cosmovisor/upgrades/${CURRENT_VERSION}/bin
      cd ${HOME}/.sifnoded/cosmovisor/upgrades/${CURRENT_VERSION}/bin

      wget -O sifnoded.zip https://github.com/Sifchain/sifnode/releases/download/${PREFIX}-${CURRENT_VERSION}/sifnoded-${PREFIX}-${CURRENT_VERSION}-linux-amd64.zip
      unzip sifnoded.zip
    fi

    wget -O /usr/local/bin/migrate.sh https://raw.githubusercontent.com/Sifchain/networks/master/scripts/migrate.sh
    chmod +x /usr/local/bin/migrate.sh
    /usr/local/bin/migrate.sh -b ${INITIAL_HEIGHT} -c ${CHAINNET} -s ${COSMOS_SDK_VERSION} -t ${GENESIS_TIME} -v ${VERSION} -w ${CURRENT_VERSION} -z ${DATA_MIGRATE_VERSION}

  start.sh: |
    #!/bin/sh
    #
    # ./start.sh <minimum_gas_prices>
    #

    if [ -f ${HOME}/.sifnoded/.timestamp ] && [ ! -f ${HOME}/.sifnoded/.upgraded ]; then
      _TIMESTAMP=$(cat ${HOME}/.sifnoded/.timestamp)
      NOW=$(date +%s)
      if [ ${NOW} -gt ${_TIMESTAMP} ]; then
        nc -l 26657
      fi
    fi

    MINIMUM_GAS_PRICES=$1
    if [ -z ${MINIMUM_GAS_PRICES} ]; then
      exit 1
    fi

    ADDITIONAL_ARGS=""
    if [ -f ${HOME}/.sifnoded/.upgraded ]; then
      ADDITIONAL_ARGS="--x-crisis-skip-assert-invariants"
    elif [ ! -z ${TIMESTAMP} ]; then
      echo ${TIMESTAMP} > ${HOME}/.sifnoded/.timestamp

      ADDITIONAL_ARGS="--halt-time ${TIMESTAMP}"
    fi

    cosmovisor start --rpc.laddr tcp://0.0.0.0:26657 --minimum-gas-prices ${MINIMUM_GAS_PRICES} ${ADDITIONAL_ARGS}
