apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ts-relayer.fullname" . }}-scripts
data:
  setup.sh: |
    #!/bin/sh
    # ./setup.sh <mnemonic>

    MNEMONIC=$1
    REGISTRY_CONFIG=$HOME/.ibc-setup/registry.yaml
    APP_CONFIG=$HOME/.ibc-setup/app.yaml

    if [ -f "${REGISTRY_CONFIG}" ] && [ -f "${APP_CONFIG}" ]; then
      exit 0
    fi

    echo "Checking to see if the chain exist in the app config already. If it exists continue."
    app_config_check=`cat ${APP_CONFIG} | grep ${CHAINNET0}`
    if [ -z "${app_config_check}" ]; then
      exit 0
    fi

    echo "Checking to see if the word connection exists in app config. If it exists continue."
    app_config_check_connection=`cat ${APP_CONFIG} | grep 'connection'`
    if [ -z "${app_config_check_connection}" ]; then
      exit 0
    fi

    mkdir -p $HOME/.ibc-setup

    if [ -z "${HDPATH1}" ]; then
      cat <<EOF > ${REGISTRY_CONFIG}
      version: 1
      chains:
        ${CHAINNET0}:
          chain_id: ${CHAINNET0}
          prefix: ${PREFIX0}
          gas_price: '${GAS_PRICE0}'
          gas_limits:
            init_client: ${GAS_LIMIT0}
            update_client: ${GAS_LIMIT0}
            init_connection: ${GAS_LIMIT0}
            connection_handshake: ${GAS_LIMIT0}
            init_channel: ${GAS_LIMIT0}
            channel_handshake: ${GAS_LIMIT0}
            receive_packet: ${GAS_LIMIT0}
            ack_packet: ${GAS_LIMIT0}
            timeout_packet: ${GAS_LIMIT0}
            transfer: ${GAS_LIMIT0}
          ics20_port: 'transfer'
          rpc:
            - ${RPC0}
        ${CHAINNET1}:
          chain_id: ${CHAINNET1}
          prefix: ${PREFIX1}
          gas_price: '${GAS_PRICE1}'
          gas_limits:
            init_client: ${GAS_LIMIT1}
            update_client: ${GAS_LIMIT1}
            init_connection: ${GAS_LIMIT1}
            connection_handshake: ${GAS_LIMIT1}
            init_channel: ${GAS_LIMIT1}
            channel_handshake: ${GAS_LIMIT1}
            receive_packet: ${GAS_LIMIT1}
            ack_packet: ${GAS_LIMIT1}
            timeout_packet: ${GAS_LIMIT1}
            transfer: ${GAS_LIMIT1}
          ics20_port: 'transfer'
          rpc:
            - ${RPC1}
      EOF
    else
      export HDPATH1=$(echo "${HDPATH1}" | base64 --decode)
      echo "HDPATH ${HDPATH1}"
      cat <<EOF > ${REGISTRY_CONFIG}
      version: 1
      chains:
        ${CHAINNET0}:
          chain_id: ${CHAINNET0}
          prefix: ${PREFIX0}
          gas_price: '${GAS_PRICE0}'
          gas_limits:
            init_client: ${GAS_LIMIT0}
            update_client: ${GAS_LIMIT0}
            init_connection: ${GAS_LIMIT0}
            connection_handshake: ${GAS_LIMIT0}
            init_channel: ${GAS_LIMIT0}
            channel_handshake: ${GAS_LIMIT0}
            receive_packet: ${GAS_LIMIT0}
            ack_packet: ${GAS_LIMIT0}
            timeout_packet: ${GAS_LIMIT0}
            transfer: ${GAS_LIMIT0}
          ics20_port: 'transfer'
          rpc:
            - ${RPC0}
        ${CHAINNET1}:
          chain_id: ${CHAINNET1}
          prefix: ${PREFIX1}
          gas_price: '${GAS_PRICE1}'
          gas_limits:
            init_client: ${GAS_LIMIT1}
            update_client: ${GAS_LIMIT1}
            init_connection: ${GAS_LIMIT1}
            connection_handshake: ${GAS_LIMIT1}
            init_channel: ${GAS_LIMIT1}
            channel_handshake: ${GAS_LIMIT1}
            receive_packet: ${GAS_LIMIT1}
            ack_packet: ${GAS_LIMIT1}
            timeout_packet: ${GAS_LIMIT1}
            transfer: ${GAS_LIMIT1}
          ics20_port: 'transfer'
          hd_path: ${HDPATH1}
          rpc:
            - ${RPC1}
      EOF
    fi

    cat <<EOF > ${APP_CONFIG}
    src: ${CHAINNET0}
    dest: ${CHAINNET1}
    EOF

    cat $HOME/.ibc-setup/registry.yaml
    cat $HOME/.ibc-setup/app.yaml

    ibc-setup ics20 --mnemonic "${MNEMONIC}"

  start.sh: |
    #!/bin/sh
    # ./start.sh <mnemonic>

    MNEMONIC=$1

    printf "%s\n" "${MNEMONIC}" | ibc-relayer start -i -v --poll 10
