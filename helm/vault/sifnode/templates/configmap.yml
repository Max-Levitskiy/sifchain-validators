apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "sifnode.fullname" . }}-scripts
data:
  external-ip.sh: |
    #!/bin/bash
    #
    # ./external-ip.sh <service> <namespace> <config_map>
    #

    apk add bind-tools

    SERVICE=$1
    NAMESPACE=$2
    CONFIGMAP=$3

    external_ip=""

    kubectl annotate svc $SERVICE service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled=false --overwrite
    sleep 5
    kubectl annotate svc $SERVICE service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled=true --overwrite

    while [ -z $external_ip ]; do
      echo "Waiting for load balancer external endpoint..."
      external_ip=$(kubectl get svc $SERVICE -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
      if [ -z $external_ip ]; then
        hostname=$(kubectl get svc $SERVICE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        [ ! -z $hostname ] && external_ip=$(dig +short $hostname | sort | head -1)
      fi
      [ -z $external_ip ] && sleep 10
    done

    kubectl create configmap $CONFIGMAP --from-literal=externalIP=$external_ip --dry-run=client -o yaml | kubectl apply -f -

  fullnode.sh: |
    #!/bin/sh
    #
    # ./fullnode.sh <mnemonic> <peer_addresses> <genesis_url> <enable_api> <enable_grpc> <snapshot_url>
    #

    MNEMONIC=$1
    PEER_ADDRESSES=$(echo "${2}" | base64 -d)
    GENESIS_URL=$3
    ENABLE_API=$4
    ENABLE_GRPC=$5
    SNAPSHOT_URL=$6

    if [ -f "${HOME}"/.sifnoded/config/genesis.json ]; then
      exit 0
    fi

    if [ "${ENABLE_API}" = true ] && [ "${ENABLE_GRPC}" = true ]; then
      sifgen node create "${CHAINNET}" "${MONIKER}" "${MNEMONIC}" \
      --bind-ip-address "${EXTERNAL_IP}" \
      --peer-address "${PEER_ADDRESSES}" \
      --genesis-url "${GENESIS_URL}" \
      --with-cosmovisor \
      --enable-api \
      --enable-grpc
    elif [ "${ENABLE_API}" = true ] && [ "${ENABLE_GRPC}" = false ]; then
      sifgen node create "${CHAINNET}" "${MONIKER}" "${MNEMONIC}" \
      --bind-ip-address "${EXTERNAL_IP}" \
      --peer-address "${PEER_ADDRESSES}" \
      --genesis-url "${GENESIS_URL}" \
      --with-cosmovisor \
      --enable-api
    elif [ "${ENABLE_API}" = false ] && [ "${ENABLE_GRPC}" = true ]; then
      sifgen node create "${CHAINNET}" "${MONIKER}" "${MNEMONIC}" \
      --bind-ip-address "${EXTERNAL_IP}" \
      --peer-address "${PEER_ADDRESSES}" \
      --genesis-url "${GENESIS_URL}" \
      --with-cosmovisor \
      --enable-grpc
    else
      sifgen node create "${CHAINNET}" "${MONIKER}" "${MNEMONIC}" \
      --bind-ip-address "${EXTERNAL_IP}" \
      --peer-address "${PEER_ADDRESSES}" \
      --genesis-url "${GENESIS_URL}" \
      --with-cosmovisor
    fi

    if [ ! -z "${SNAPSHOT_URL}" ]; then
      cd "${HOME}"/.sifnoded
      wget -O snapshot.tgz "${SNAPSHOT_URL}"
      tar -zxvf snapshot.tgz
    fi

  standalone.sh: |
    #!/bin/sh
    #
    # ./standalone.sh <mnemonic> <mint_amount> <bond_amount> <admin_clp_addresses> <admin_oracle_address> <max_deposit_period> <gov_voting_period> <enable_api> <enable_grpc>
    #

    MNEMONIC=$1
    MINT_AMOUNT=$2
    BOND_AMOUNT=$3
    ADMIN_CLP_ADDRESSES=$4
    ADMIN_ORACLE_ADDRESS=$5
    MAX_DEPOSIT_PERIOD=$6
    GOV_VOTING_PERIOD=$7
    ENABLE_API=$4
    ENABLE_GRPC=$5

    if [ -f "${HOME}"/.sifnoded/config/genesis.json ]; then
      exit 0
    fi

    if [ "${ENABLE_API}" = true ] && [ "${ENABLE_GRPC}" = true ]; then
      sifgen node create "${CHAINNET}" "${MONIKER}" "${MNEMONIC}" \
      --mint-amount "${MINT_AMOUNT}" \
      --bond-amount "${BOND_AMOUNT}" \
      --admin-clp-addresses "'${ADMIN_CLP_ADDRESSES}'" \
      --admin-oracle-address "${ADMIN_ORACLE_ADDRESS}" \
      --bind-ip-address "${EXTERNAL_IP}" \
      --gov-max-deposit-period "${MAX_DEPOSIT_PERIOD}" \
      --gov-voting-period "${GOV_VOTING_PERIOD}" \
      --standalone \
      --with-cosmovisor \
      --enable-api \
      --enable-grpc
    elif [ "${ENABLE_API}" = true ] && [ "${ENABLE_GRPC}" = false ]; then
      sifgen node create "${CHAINNET}" "${MONIKER}" "${MNEMONIC}" \
      --mint-amount "${MINT_AMOUNT}" \
      --bond-amount "${BOND_AMOUNT}" \
      --admin-clp-addresses "'${ADMIN_CLP_ADDRESSES}'" \
      --admin-oracle-address "${ADMIN_ORACLE_ADDRESS}" \
      --bind-ip-address "${EXTERNAL_IP}" \
      --gov-max-deposit-period "${MAX_DEPOSIT_PERIOD}" \
      --gov-voting-period "${GOV_VOTING_PERIOD}" \
      --standalone \
      --with-cosmovisor \
      --enable-api
    elif [ "${ENABLE_API}" = false ] && [ "${ENABLE_GRPC}" = true ]; then
      sifgen node create "${CHAINNET}" "${MONIKER}" "${MNEMONIC}" \
      --mint-amount "${MINT_AMOUNT}" \
      --bond-amount "${BOND_AMOUNT}" \
      --admin-clp-addresses "'${ADMIN_CLP_ADDRESSES}'" \
      --admin-oracle-address "${ADMIN_ORACLE_ADDRESS}" \
      --bind-ip-address "${EXTERNAL_IP}" \
      --gov-max-deposit-period "${MAX_DEPOSIT_PERIOD}" \
      --gov-voting-period "${GOV_VOTING_PERIOD}" \
      --standalone \
      --with-cosmovisor \
      --enable-grpc
    else
      sifgen node create "${CHAINNET}" "${MONIKER}" "${MNEMONIC}" \
      --mint-amount "${MINT_AMOUNT}" \
      --bond-amount "${BOND_AMOUNT}" \
      --admin-clp-addresses "'${ADMIN_CLP_ADDRESSES}'" \
      --admin-oracle-address "${ADMIN_ORACLE_ADDRESS}" \
      --bind-ip-address "${EXTERNAL_IP}" \
      --gov-max-deposit-period "${MAX_DEPOSIT_PERIOD}" \
      --gov-voting-period "${GOV_VOTING_PERIOD}" \
      --standalone \
      --with-cosmovisor
    fi


  start.sh: |
    #!/bin/sh
    #
    # ./start.sh <minimum_gas_prices> <additional_args>
    #

    MINIMUM_GAS_PRICES=$1
    ADDITIONAl_ARGS=$2

    cosmovisor start --rpc.laddr tcp://0.0.0.0:26657 --minimum-gas-prices ${MINIMUM_GAS_PRICES} --x-crisis-skip-assert-invariants ${ADDITIONAl_ARGS}

