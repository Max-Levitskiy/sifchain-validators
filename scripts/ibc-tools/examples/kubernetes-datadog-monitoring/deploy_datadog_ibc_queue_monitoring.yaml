---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ibc-queue-datadog-monitoring
  namespace: ibc-queue-datadog-monitoring
  labels:
    app: ibc-queue-datadog-monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ibc-queue-datadog-monitoring
  template:
    metadata:
      labels:
        app: ibc-queue-datadog-monitoring
    spec:
      volumes:
        - name: ibc-queue-datadog-monitoring-configmap
          configMap:
            name: ibc-queue-datadog-monitoring-configmap
      containers:
      - name: ibc-queue-datadog-monitoring
        image: python:3.8
        volumeMounts:
          - name: ibc-queue-datadog-monitoring-configmap
            mountPath: "/scripts"
        command: ["/bin/sh"]
        args: ["-c", "pip install requests && pip install json-log-formatter && pip install datadog-api-client && cd /scripts && python ibc_datadog_monitoring.py"]
        env:
          - name: DD_SITE
            valueFrom:
              secretKeyRef:
                name: ibc-queue-datadog-monitoring-secret
                key: DD_SITE
          - name: DD_API_KEY
            valueFrom:
              secretKeyRef:
                name: ibc-queue-datadog-monitoring-secret
                key: DD_API_KEY

---
apiVersion: v1
kind: Secret
metadata:
  name: ibc-queue-datadog-monitoring-secret
  namespace: ibc-queue-datadog-monitoring
stringData:
  DD_SITE: "datadoghq.com"
  DD_API_KEY: "<YOUR DATADOG API KEY HERE>"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ibc-queue-datadog-monitoring-configmap
  namespace: ibc-queue-datadog-monitoring
data:
  ibc_datadog_monitoring.py: |
    from cosmos_ibc import CosmosIBC
    import os
    import datetime
    import time

    ibc_connections_to_check = [
        ("http://public-node.terra.dev:26657", "https://rpc.sifchain.finance:443", "https://api.sifchain.finance","channel-18", "connection-19", "channel-7", "connection-21", "sifnoded", "sifchain/terra"),
        ("http://emoney.sifchain.finance:26657", "https://rpc.sifchain.finance:443", "https://api.sifchain.finance","channel-14", "connection-19", "channel-19", "connection-22", "sifnoded", "sifchain/emoney"),
        ("http://osmosis.sifchain.finance:26657", "https://rpc.sifchain.finance:443", "https://api.sifchain.finance","channel-47", "connection-1159", "channel-17", "connection-20", "sifnoded", "sifchain/osmosis"),
        ("http://ixo.sifchain.finance:26657", "https://rpc.sifchain.finance:443", "https://api.sifchain.finance","channel-11", "connection-25", "channel-15", "connection-18", "sifnoded", "sifchain/ixo"),
        ("http://juno.sifchain.finance:26657", "https://rpc.sifchain.finance:443", "https://api.sifchain.finance","channel-5", "connection-8", "channel-14", "connection-17", "sifnoded", "sifchain/juno"),
        ("http://sentinel.sifchain.finance:26657", "https://rpc.sifchain.finance:443", "https://api.sifchain.finance","channel-36", "connection-58", "channel-1", "connection-1", "sifnoded", "sifchain/sentinel"),
        ("http://akash.sifchain.finance:26657", "https://rpc.sifchain.finance:443", "https://api.sifchain.finance","channel-24", "connection-36", "channel-2", "connection-2", "sifnoded", "sifchain/akash"),
        ("http://gaia.sifchain.finance:26657", "https://rpc.sifchain.finance:443", "https://api.sifchain.finance","channel-192", "connection-347", "channel-0", "connection-0", "sifnoded", "sifchain/gaia"),
        ("http://iris.sifchain.finance:26657", "https://rpc.sifchain.finance:443", "https://api.sifchain.finance","channel-8", "connection-9", "channel-19", "connection-30", "sifnoded", "sifchain/iris"),
        ("http://persistence.sifchain.finance:26657", "https://rpc.sifchain.finance:443", "https://api.sifchain.finance","channel-7", "connection-8", "channel-26", "connection-32", "sifnoded", "sifchain/persistence"),
        ("http://regen.sifchain.finance:26657", "https://rpc.sifchain.finance:443", "https://api.sifchain.finance","channel-10", "connection-13", "channel-28", "connection-60", "sifnoded", "sifchain/regen"),
        ("http://crypto-org.sifchain.finance:26657", "https://rpc.sifchain.finance:443", "https://api.sifchain.finance","channel-9", "connection-10", "channel-33", "connection-239", "sifnoded", "sifchain/crypto-org")
    ]

    while True:
        now_time = datetime.datetime.now()
        try:
            print("Starting Check # {check_time}".format(check_time=str(datetime.datetime.now())))
            for connection in ibc_connections_to_check:
                run_time = datetime.datetime.now()
                external_rpc_node = connection[0]
                sifnode_rpc_node = connection[1]
                sifnode_api_node = connection[2]
                destination_channel = connection[3]
                destination_connection = connection[4]
                source_channel = connection[5]
                source_connection = connection[6]
                binary_name = connection[7]
                chains = connection[8]

                cosmos_helper = CosmosIBC(binary_name, sifnode_rpc_node, sifnode_api_node)
                stuck_import_transactions, stuck_export_transactions = cosmos_helper.look_for_stuck_transactions(external_rpc_node,
                                                                                                                 sifnode_rpc_node,
                                                                                                                 destination_channel,
                                                                                                                 destination_connection,
                                                                                                                 source_channel,
                                                                                                                 source_connection,
                                                                                                                 binary_name)

                if stuck_import_transactions:
                    cosmos_helper.send_datadog_log(stuck_import_transactions, chains, "Import")
                if stuck_export_transactions:
                    cosmos_helper.send_datadog_log(stuck_export_transactions, chains, "Export")

                run_end_time = datetime.datetime.now()
                run_total_time_to_complete = run_end_time - now_time
                cosmos_helper.log_it("Run Total Time: {time_spent}".format(time_spent=str(run_total_time_to_complete)))

            end_time = datetime.datetime.now()
            total_time_to_complete = end_time - now_time
            cosmos_helper.log_it("Total Time: {time_spent}".format(time_spent=str(total_time_to_complete)))
            time.sleep(1200)
        except Exception as e:
            print(str(e))

  cosmos_ibc.py: |
    import sys
    import subprocess
    import json
    import logging
    import json_log_formatter
    import subprocess
    import requests
    from datadog_api_client.v2 import ApiClient, ApiException, Configuration
    from datadog_api_client.v2.api import logs_api
    from datadog_api_client.v2.models import *

    class CosmosIBC:
        def __init__(self, binary_name, rpc_node, api_node):
            self.binary_name = binary_name
            self.rpc_node = rpc_node
            self.api_node = api_node
            self.go_bin_folder = "~/go/bin"
            self.destination_channel = ""
            self.source_channel = ""
            formatter_normal = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
            streamHandler = logging.StreamHandler(sys.stdout)
            streamHandler.setFormatter(formatter_normal)
            self.logger = logging.getLogger('logger')
            self.logger.addHandler(streamHandler)
            self.logger.setLevel(logging.INFO)

        def cli_command(self, command, gopath):
            command_eddition = "export PATH={go_path}:$PATH &&".format(go_path=gopath)
            command = command_eddition + command
            result = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            result = result.stdout.decode('utf-8')
            return result

        def api_request(self, api_path):
            connection_url = "{api_url}{api_path}".format(api_url=self.api_node, api_path=api_path)
            try:
                request = requests.get(connection_url)
            except Exception as e:
                self.log_it(str(e))
                return None

            if request.status_code == 200 or request.status_code == 201:
                request_data_object = request.json()
                return request_data_object
            else:
                self.log_it(request.status_code)
                self.log_it(request.content)
                return None

        def cosmosation_api_request(self, api_path):
            connection_url = "{api_url}{api_path}".format(api_url=self.cosmosation_api, api_path=api_path)
            try:
                request = requests.get(connection_url)
            except Exception as e:
                self.log_it(str(e))
                return None

            if request.status_code == 200 or request.status_code == 201:
                request_data_object = request.json()
                return request_data_object
            else:
                self.log_it(request.status_code)
                self.log_it(request.content)
                return None

        def send_slack_message(self, message, ibc_alert_channel_webhook):
            slack_post_requests = requests.post(ibc_alert_channel_webhook, headers={"Content-type": "application/json"},
                                                json=message)
            return slack_post_requests.status_code, slack_post_requests.text

        def log_it(self, message):
            self.logger.info(str(message))

        def print_transaction_csv(self, found_transactions):
            self.log_it("packet_sequence,txhas,type,gas_wanted,gas_used,amount,denom,receiver,sender,adjusted_decimal_amount_of_token_luna,current_token_price,cost_in_USD")
            for tx in found_transactions:
                print(tx["packet_sequence"], ",", tx["txhash"], ",", tx["type"], ",", tx["gas_wanted"], ",", tx["gas_used"],
                      ",", tx["amount"], ",", tx["denom"], ",", tx["receiver"], ",", tx["sender"], ",",
                      tx["adjusted_decimal_amount_of_token"], ",", tx["current_terra_price_usd"], ",", tx["cost_in_USD"])

            return self

        def check_account_balance(self, account):
            try:
                account_balance = 0
                check_api_status_request = requests.get(self.api_node + "/node_info").json()
                if check_api_status_request:
                    if account:
                        query_balance = requests.get(self.api_node + "/cosmos/bank/v1beta1/balances/" + account)
                        if query_balance.status_code == 200 or query_balance.status_code == 201:
                            query_balance_json = query_balance.json()
                            if "balances" in query_balance_json:
                                if query_balance_json["balances"]:
                                    account_balance = query_balance_json["balances"][0]["amount"]
            except Exception as e:
                self.log_it(self.binary_name, "api not active", e)
            return account_balance

        def check_api_active(self):
            try:
                api_active = False
                check_api_status_request = requests.get(self.api_node + "/node_info")
                if check_api_status_request.status_code == 200:
                    api_active = True
            except Exception as e:
                self.log_it(self.binary_name + "api not active" + str(e))
            return api_active

        def check_rpc_node_in_sync(self):
            try:
                rpc_active = False
                up_to_date = False
                check_status_request = requests.get(self.rpc_node + "/status")
                check_status_response = json.loads(check_status_request.text)
                if check_status_request.status_code == 200:
                    rpc_active = True
                    if not check_status_response["result"]["sync_info"]["catching_up"]:
                        up_to_date = True
            except Exception as e:
                self.log_it(self.binary_name + "rpc not active" + str(e))
            return rpc_active, up_to_date

        def load_account_from_mnemonic(self, moniker, mnemonic):
            self.cli_command(
                """{binary_name} keys delete {moniker} --keyring-backend test -y || echo "not present" """.format(
                    binary_name=self.binary_name, rpc_node=self.rpc_node, moniker=moniker, mnemonic=mnemonic),
                self.go_bin_folder)
            load_mnemonic = self.cli_command(
                """echo "{mnemonic}" | {binary_name} keys add {moniker} --keyring-backend test --recover""".format(
                    binary_name=self.binary_name, rpc_node=self.rpc_node, moniker=moniker, mnemonic=mnemonic),
                self.go_bin_folder)
            address = load_mnemonic.split("address:")[1].split("\n")[0].strip()
            return address

        """
        Description:
            This command takes two loaded mnemonics a bank mnemonic and a destination mnemonic
            and will utilize the go cli to execute the transaction to fund the account.
        """

        def send_from_bank(self, from_account, to_account, chain_id, ammount, gas_price):
            send_money_transaction = self.cli_command(
                """{binary_name} tx bank send {from_account} {to_account} {ammount} -y --node {rpc_node} --gas-prices {gas_price} --keyring-backend test --chain-id {chain_id}""".format(
                    binary_name=self.binary_name,
                    rpc_node=self.rpc_node,
                    from_account=from_account,
                    to_account=to_account,
                    ammount=ammount,
                    gas_price=gas_price,
                    chain_id=chain_id), self.go_bin_folder)
            return send_money_transaction

        def retrieve_ibc_connections(self):
            page = 1
            connections = []
            while True:
                client_query = json.loads(self.cli_command(
                    "{binary_name} query ibc connection connections --node {rpc_node} --output json".format(
                        binary_name=self.binary_name,
                        rpc_node=self.rpc_node),
                    self.go_bin_folder))
                connections.extend(client_query['connections'])
                if not client_query['pagination']['next_key']:
                    break
                page += 1
            return connections

        def retrieve_ibc_channels(self):
            page = 1
            channels = []
            while True:
                client_query = json.loads(self.cli_command(
                    "{binary_name} query ibc channel channels --node {rpc_node} --output json".format(
                        binary_name=self.binary_name,
                        rpc_node=self.rpc_node),
                    self.go_bin_folder))
                channels.extend(client_query['channels'])
                if not client_query['pagination']['next_key']:
                    break
                page += 1
            return channels

        def retrieve_ibc_client_states(self):
            page = 1
            clients = []
            while True:
                client_query = json.loads(self.cli_command(
                    "{binary_name} query ibc client states --node {rpc_node} --output json".format(
                        binary_name=self.binary_name,
                        rpc_node=self.rpc_node),
                    self.go_bin_folder))
                clients.extend(client_query['client_states'])
                if not client_query['pagination']['next_key']:
                    break
                page += 1
            return clients

        def get_current_block_height(self):
            try:
                current_height_request = requests.get(self.rpc_node + "/status").json()["result"]["sync_info"][
                    "latest_block_height"]
                return current_height_request
            except Exception as e:
                self.log_it("RPC Is having issues did not return a json response for status" + e)

        def parse_transaction(self, transaction):
            txhash = transaction["hash"]
            height = transaction["height"]
            gas_wanted = transaction["tx_result"]["gas_wanted"]
            gas_used = transaction["tx_result"]["gas_used"]
            found_transaction = False
            logs = json.loads(transaction["tx_result"]["log"])
            found_transaction_dict = {}
            for log in logs:
                if not found_transaction:
                    for event in log["events"]:
                        if "type" in event:
                            type = event["type"]
                            if "attributes" in event:
                                for attribute in event["attributes"]:
                                    if attribute["key"] == "packet_data":
                                        packet_data = json.loads(attribute["value"])
                                        if "denom" in packet_data:
                                            found_transaction = True
                                    if attribute["key"] == "packet_sequence" and found_transaction:
                                        packet_id = attribute["value"]
                                    if attribute["key"] == "packet_src_channel" and found_transaction:
                                        packet_src_channel = attribute["value"]
                                    if attribute["key"] == "packet_dst_channel" and found_transaction:
                                        packet_dst_channel = attribute["value"]
                                    if attribute["key"] == "packet_connection" and found_transaction:
                                        packet_connection = attribute["value"]
            amount = float(packet_data["amount"])
            denom = packet_data["denom"]
            receiver = packet_data["receiver"]
            sender = packet_data["sender"]
            found_transaction_dict = {"packet_sequence": packet_id,
                                      "packet_source_channel": packet_src_channel,
                                      "packet_dst_channel": packet_dst_channel,
                                      "packet_connection": packet_connection,
                                      "txhash": txhash,
                                      "type": type,
                                      "height": height,
                                      "gas_wanted": gas_wanted,
                                      "gas_used": gas_used,
                                      "amount": amount,
                                      "denom": denom,
                                      "receiver": receiver,
                                      "sender": sender
                                      }
            return found_transaction_dict

        def get_packet_commitments_with_cli(self, channel, binary_name, rpc_node):
            page = 1
            commitments = []
            while True:
                try:
                    client_query = json.loads(self.cli_command(
                        "{binary_name} q ibc channel packet-commitments transfer {from_channel} --node {rpc_node} --output json --page {page}".format(
                            binary_name=binary_name, rpc_node=rpc_node, from_channel=channel, page=page), self.go_bin_folder))
                    commitments.extend(client_query['commitments'])
                    if not client_query['pagination']['next_key']:
                        break
                    page += 1
                except Exception as e:
                    self.log_it(str(e))
                    return commitments
            return commitments

        def get_packet_unreceived_with_cli_and_return_stuck_transactions(self, channel, binary_name, rpc_node,
                                                                 commitment_sequences):
            try:
                stuck_transactions = json.loads(self.cli_command(
                    '{binary_name} q ibc channel unreceived-packets transfer {from_channel} --sequences="{sequences}" --node {rpc_node} --output json '.format(
                        binary_name=binary_name, rpc_node=rpc_node, from_channel=channel, sequences=commitment_sequences),
                    self.go_bin_folder))
            except Exception as e:
                self.log_it(str(e))
                stuck_transactions = []

            return stuck_transactions

        def recursive_rpc_event_query(self, event_query):
            packets_list = []
            page = 1
            while True:
                connection_url = '{rpc_url}/tx_search?query="{event_query}"&page={page}'.format(rpc_url=self.rpc_node,
                                                                                                event_query=event_query,
                                                                                                page=page)
                try:
                    request = requests.get(connection_url)
                except Exception as e:
                    self.log_it(str(e))
                    return packets_list

                if request.status_code == 200 or request.status_code == 201:
                    request_data_object = request.json()
                    if "result" in request_data_object:
                        pages_total = int(request_data_object["result"]["total_count"]) / 30 + 1
                        pages_total = str(int(round(pages_total, 0)))
                        if page > int(pages_total):
                            break
                        self.log_it("Building packet list: current page: {current_page} of {pages} total pages.".format(
                            current_page=page, pages=pages_total))
                        packets_list += request_data_object["result"]["txs"]
                        page += 1
                    else:
                        self.log_it(request.status_code)
                        self.log_it(request.content)
                        break
                else:
                    self.log_it(request.status_code)
                    self.log_it(request.content)
                    break
            self.log_it("Return Packet Lists" + str(packets_list))
            return packets_list

        def build_sent_packets_data_structure(self, sent_packets):
            parsed_transactions = []
            for tx in sent_packets:
                parsed_transactions.append(self.parse_transaction(tx))
            return parsed_transactions

        def build_string_comma_list_of_sequences_from_object(self, commitments):
            sequences = ""
            for commit in commitments:
                sequences = sequences + commit["sequence"] + ","
            sequences = sequences[:-1]
            return sequences

        def parse_sent_transactions_and_match_stuck_packet_sequences(self, import_stuck_packets, parsed_transactions):
            stuck_import_transactions = []
            for packet in import_stuck_packets["sequences"]:
                for sequence in parsed_transactions:
                    if packet == sequence["packet_sequence"]:
                        packet_data = sequence
                        stuck_import_transactions.append(packet_data)
                        break
            return stuck_import_transactions

        def look_for_stuck_transactions(self, external_node_rpc, import_node_rpc, destination_channel,
                                        destination_connection, source_channel, source_connection, binary_name):
            # This is to make it more dynamic because I want to loop over a list of these values so I set it in the class as a whole for each call so it will overwrite always the init.

            self.destination_channel = destination_channel
            self.destination_connection = destination_connection
            self.source_channel = source_channel
            self.source_connection = source_connection
            self.binary_name = binary_name
            self.rpc_node = import_node_rpc
            stuck_import_transactions = {}
            stuck_export_transactions = {}
            commitments = self.get_packet_commitments_with_cli(self.destination_channel, self.binary_name, import_node_rpc)
            sequences = self.build_string_comma_list_of_sequences_from_object(commitments)
            if sequences:
                export_stuck_packets = self.get_packet_unreceived_with_cli_and_return_stuck_transactions(self.source_channel,
                                                                                                         self.binary_name,
                                                                                                         external_node_rpc,
                                                                                                         sequences)

                self.rpc_node = import_node_rpc
                sent_packets = self.recursive_rpc_event_query(
                    "send_packet.packet_connection=\'{connection}\'".format(connection=self.source_connection))
                send_transactions_data_object = self.build_sent_packets_data_structure(sent_packets)
                stuck_export_transactions = self.parse_sent_transactions_and_match_stuck_packet_sequences(export_stuck_packets,
                                                                                                          send_transactions_data_object)


            commitments = self.get_packet_commitments_with_cli(self.source_channel, self.binary_name, external_node_rpc)
            sequences = self.build_string_comma_list_of_sequences_from_object(commitments)
            if sequences:
                import_stuck_packets = self.get_packet_unreceived_with_cli_and_return_stuck_transactions(
                    self.destination_channel, self.binary_name, import_node_rpc, sequences)

                self.rpc_node = external_node_rpc
                sent_packets = self.recursive_rpc_event_query(
                    "send_packet.packet_connection=\'{connection}\'".format(connection=self.destination_connection))
                send_transactions_data_object = self.build_sent_packets_data_structure(sent_packets)
                stuck_import_transactions = self.parse_sent_transactions_and_match_stuck_packet_sequences(import_stuck_packets,
                                                                                                          send_transactions_data_object)

            return stuck_import_transactions, stuck_export_transactions

        def send_datadog_log(self, stuck_txs, chains, type_tx):
            configuration = Configuration()
            for stuck_tx in stuck_txs:
                dd_tags = 'cluster_name:chainops,env:betanet,tx_type:{tx_type},chains:{chains}'.format(tx_type=type_tx,chains=chains)
                message = {"packet_sequence": str(stuck_tx["packet_sequence"]),
                           "packet_source_channel": str(stuck_tx["packet_source_channel"]),
                           "packet_dst_channel": str(stuck_tx["packet_dst_channel"]),
                           "packet_connection": str(stuck_tx["packet_connection"]),
                           "txhash": str(stuck_tx["txhash"]),
                           "height": str(stuck_tx["height"]),
                           "gas_wanted": str(stuck_tx["gas_wanted"]),
                           "gas_used": str(stuck_tx["gas_used"]),
                           "amount": str(stuck_tx["amount"]),
                           "denom": str(stuck_tx["denom"]),
                           "reciever": str(stuck_tx["receiver"]),
                           "sender": str(stuck_tx["sender"]),
                           "chains": chains,
                           "type_tx": type_tx}
                message = json.dumps(message)

                with ApiClient(configuration) as api_client:
                    api_instance = logs_api.LogsApi(api_client)
                    body = HTTPLog([
                        HTTPLogItem(
                            ddsource="ibc-stuck-transactions",
                            ddtags=dd_tags,
                            service="ibc-stuck-transactions",
                            hostname=chains,
                            message=message
                        ),
                    ])
                    try:
                        api_response = api_instance.submit_log(body)
                        self.log_it(api_response)
                    except ApiException as e:
                        self.log_it("Exception when calling LogsApi->submit_log: %s\n" % e)